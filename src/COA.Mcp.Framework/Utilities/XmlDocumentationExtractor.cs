using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;

namespace COA.Mcp.Framework.Utilities;

/// <summary>
/// Extracts documentation from XML documentation files generated by the compiler.
/// Provides access to summary, parameter descriptions, examples, and other documentation elements.
/// </summary>
public static class XmlDocumentationExtractor
{
    private static readonly Dictionary<string, XDocument> _documentationCache = new();

    /// <summary>
    /// Gets the documentation for a specific type.
    /// </summary>
    /// <param name="type">The type to get documentation for.</param>
    /// <returns>Type documentation or null if not found.</returns>
    public static TypeDocumentation? GetTypeDocumentation(Type type)
    {
        var xmlDoc = GetXmlDocumentForAssembly(type.Assembly);
        if (xmlDoc == null) return null;

        var typeName = GetXmlTypeName(type);
        var memberElement = xmlDoc.Descendants("member")
            .FirstOrDefault(x => x.Attribute("name")?.Value == $"T:{typeName}");

        if (memberElement == null) return null;

        return new TypeDocumentation
        {
            Summary = GetElementText(memberElement, "summary"),
            Remarks = GetElementText(memberElement, "remarks"),
            Examples = GetExamples(memberElement)
        };
    }

    /// <summary>
    /// Gets the documentation for a specific method.
    /// </summary>
    /// <param name="method">The method to get documentation for.</param>
    /// <returns>Method documentation or null if not found.</returns>
    public static MethodDocumentation? GetMethodDocumentation(MethodInfo method)
    {
        var xmlDoc = GetXmlDocumentForAssembly(method.DeclaringType?.Assembly);
        if (xmlDoc == null) return null;

        var memberName = GetXmlMethodName(method);
        var memberElement = xmlDoc.Descendants("member")
            .FirstOrDefault(x => x.Attribute("name")?.Value == memberName);

        if (memberElement == null) return null;

        var parameters = GetParameterDocumentation(memberElement);

        return new MethodDocumentation
        {
            Summary = GetElementText(memberElement, "summary"),
            Parameters = parameters,
            Returns = GetElementText(memberElement, "returns"),
            Remarks = GetElementText(memberElement, "remarks"),
            Examples = GetExamples(memberElement)
        };
    }

    /// <summary>
    /// Gets the documentation for a specific property.
    /// </summary>
    /// <param name="property">The property to get documentation for.</param>
    /// <returns>Property documentation or null if not found.</returns>
    public static PropertyDocumentation? GetPropertyDocumentation(PropertyInfo property)
    {
        var xmlDoc = GetXmlDocumentForAssembly(property.DeclaringType?.Assembly);
        if (xmlDoc == null) return null;

        var memberName = GetXmlPropertyName(property);
        var memberElement = xmlDoc.Descendants("member")
            .FirstOrDefault(x => x.Attribute("name")?.Value == memberName);

        if (memberElement == null) return null;

        return new PropertyDocumentation
        {
            Summary = GetElementText(memberElement, "summary"),
            Value = GetElementText(memberElement, "value"),
            Remarks = GetElementText(memberElement, "remarks"),
            Examples = GetExamples(memberElement)
        };
    }

    private static XDocument? GetXmlDocumentForAssembly(Assembly? assembly)
    {
        if (assembly == null) return null;

        var assemblyLocation = assembly.Location;
        if (string.IsNullOrEmpty(assemblyLocation)) return null;

        // Check cache first
        if (_documentationCache.TryGetValue(assemblyLocation, out var cachedDoc))
        {
            return cachedDoc;
        }

        // Look for XML documentation file
        var xmlPath = Path.ChangeExtension(assemblyLocation, ".xml");
        if (!File.Exists(xmlPath)) return null;

        try
        {
            var xmlDoc = XDocument.Load(xmlPath);
            _documentationCache[assemblyLocation] = xmlDoc;
            return xmlDoc;
        }
        catch
        {
            // Ignore XML parsing errors
            return null;
        }
    }

    private static string GetXmlTypeName(Type type)
    {
        if (type.IsGenericType)
        {
            var genericTypeName = type.GetGenericTypeDefinition().FullName;
            var genericArgs = type.GetGenericArguments()
                .Select(GetXmlTypeName)
                .ToArray();

            // Replace backtick with generic parameter syntax
            var backtickIndex = genericTypeName?.IndexOf('`') ?? -1;
            if (backtickIndex >= 0 && genericTypeName != null)
            {
                genericTypeName = genericTypeName.Substring(0, backtickIndex);
            }

            return $"{genericTypeName}{{{string.Join(",", genericArgs)}}}";
        }

        return type.FullName ?? type.Name;
    }

    private static string GetXmlMethodName(MethodInfo method)
    {
        var declaringType = method.DeclaringType;
        if (declaringType == null) return $"M:{method.Name}";

        var typeName = GetXmlTypeName(declaringType);
        var methodName = method.Name;

        // Handle generic methods
        if (method.IsGenericMethod)
        {
            var genericArgs = method.GetGenericArguments();
            methodName += $"``{genericArgs.Length}";
        }

        // Handle method parameters
        var parameters = method.GetParameters();
        if (parameters.Length > 0)
        {
            var paramTypes = parameters.Select(p => GetXmlTypeName(p.ParameterType));
            methodName += $"({string.Join(",", paramTypes)})";
        }

        return $"M:{typeName}.{methodName}";
    }

    private static string GetXmlPropertyName(PropertyInfo property)
    {
        var declaringType = property.DeclaringType;
        if (declaringType == null) return $"P:{property.Name}";

        var typeName = GetXmlTypeName(declaringType);
        return $"P:{typeName}.{property.Name}";
    }

    private static string? GetElementText(XElement memberElement, string elementName)
    {
        var element = memberElement.Element(elementName);
        return element?.Value?.Trim();
    }

    private static Dictionary<string, string> GetParameterDocumentation(XElement memberElement)
    {
        var parameters = new Dictionary<string, string>();

        foreach (var paramElement in memberElement.Elements("param"))
        {
            var name = paramElement.Attribute("name")?.Value;
            var description = paramElement.Value?.Trim();

            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(description))
            {
                parameters[name] = description;
            }
        }

        return parameters;
    }

    private static List<string> GetExamples(XElement memberElement)
    {
        return memberElement.Elements("example")
            .Select(e => e.Value?.Trim())
            .Where(v => !string.IsNullOrEmpty(v))
            .ToList()!;
    }
}

/// <summary>
/// Represents documentation for a type.
/// </summary>
public class TypeDocumentation
{
    public string? Summary { get; set; }
    public string? Remarks { get; set; }
    public List<string> Examples { get; set; } = new();
}

/// <summary>
/// Represents documentation for a method.
/// </summary>
public class MethodDocumentation
{
    public string? Summary { get; set; }
    public Dictionary<string, string> Parameters { get; set; } = new();
    public string? Returns { get; set; }
    public string? Remarks { get; set; }
    public List<string> Examples { get; set; } = new();
}

/// <summary>
/// Represents documentation for a property.
/// </summary>
public class PropertyDocumentation
{
    public string? Summary { get; set; }
    public string? Value { get; set; }
    public string? Remarks { get; set; }
    public List<string> Examples { get; set; } = new();
}